@using GGNet.Buffers

@typeparam T
@typeparam TX
@typeparam TY

@inherits PlotBase<T, TX, TY>

<CascadingValue Value=StringBuilderPool IsFixed=true>

    <svg id=@Id class=@(CssClass()) theme=@Theme xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 @Width @Height">

        <defs>
            @_renderLegendGradients;
        </defs>

        <clipPath id="@(Id)-plot">
            <rect x="0" y="0" width=@Width height=@Height />
        </clipPath>

        <rect class="plot" width="100%" height="100%" />

        @_renderLegend;

        <CascadingValue Value=@this IsFixed=true>
            @_renderPanels;
        </CascadingValue>

    </svg>

</CascadingValue>

@code {
    private void RenderLegendGradients(RenderTreeBuilder __builder)
    {
        for (int i = 0; i < Context.Legends.Count; i++)
        {
            var l = Context.Legends[i];
            if (l.Aes.Type != Guide.ColorBar)
            {
                continue;
            }

            var n = l.Items.Count;
            if (n < 2)
            {
                continue;
            }

            <linearGradient id="gadient-@(Id)-@i"
                            x1="0%"
                            y1="0%"
                            x2=@(Style.Legend.Direction == Direction.Vertical ? "0%" : "100%")
                            y2="@(Style.Legend.Direction == Direction.Vertical ? "100%" : "0%")">

                <stop offset="0%" stop-color=@l.Items[0].elements[0].Value.StopColor stop-opacity=@l.Items[0].elements[0].Value.StopOpacity />

                @if (n > 2)
                {
                    var delta = 100.0 / (n - 2.0);

                    for (var j = 0; j < n - 1; j++)
                    {
                        <stop offset="@(j * delta)%" stop-color=@l.Items[j].elements[0].Value.StopColor stop-opacity=@l.Items[j].elements[0].Value.StopOpacity />
                    }
                }

                <stop offset="100%" stop-color=@l.Items[n - 1].elements[0].Value.StopColor stop-opacity=@l.Items[n - 1].elements[0].Value.StopOpacity />

            </linearGradient>
        }
    }

    private void RenderLegend(RenderTreeBuilder __builder)
    {
        if (Legend.Width == 0)
        {
            return;
        }

        if (Style.Legend.Direction == Direction.Vertical)
        {
            var offset = Legend.Y;

            for (int i = 0; i < Context.Legends.Count; i++)
            {
                var l = Context.Legends[i];

                if (l.Title?.Width > 0)
                {
                    offset += Style.Legend.Title.Margin.Top;

                    <text>
                        <text
                              class="legend-title"
                              x=@(Legend.X)
                              y=@(offset + l.Title.Height)
                              text-anchor=@(Style.Legend.Title.Anchor.Render())
                              font-size=@(Style.Legend.Title.FontSize)
                              clip-path="url(#@(Id)-plot)">
                            @l.Title.Value
                        </text>
                    </text>

                    offset += l.Title.Height + Style.Legend.Title.Margin.Bottom;
                }

                if (l.Aes.Type == Guide.Items)
                {
                    for (int j = 0; j < l.Items.Count; j++)
                    {
                        var (label, elements) = l.Items[j];

                        offset += Style.Legend.Labels.Margin.Top;

                        for (int k = 0; k < elements.Count; k++)
                        {
                            var element = elements[k];

                            if (element.Value is Elements.HLine hline)
                            {
                                <line x1=@Legend.Y
                                      x2=@(Legend.X + l.Width)
                                      y1=@(offset + elements.Height / 2.0)
                                      y2=@(offset + elements.Height / 2.0)
                                      stroke-width=@hline.StrokeWidth
                                      stroke=@hline.Stroke
                                      stroke-opacity=@hline.StrokeOpacity
                                      clip-path="url(#@(Id)-plot)" />

                            }
                            else if (element.Value is Elements.VLine vline)
                            {
                                <line x1=@(Legend.X + l.Width / 2.0)
                                      x2=@(Legend.X + l.Width / 2.0)
                                      y1=@offset
                                      y2=@(offset + elements.Height)
                                      stroke-width=@vline.StrokeWidth
                                      stroke=@vline.Stroke
                                      stroke-opacity=@vline.StrokeOpacity
                                      clip-path="url(#@(Id)-plot)" />

                            }
                            else if (element.Value is Elements.Circle circle)
                            {
                                <circle cx=@(Legend.X + l.Width / 2.0)
                                        cy=@(offset + elements.Height / 2.0)
                                        r=@circle.Radius
                                        stroke-width="0.71"
                                        stroke=@circle.Stroke
                                        stroke-opacity=@circle.StrokeOpacity
                                        fill=@circle.Fill
                                        fill-opacity=@circle.FillOpacity
                                        clip-path="url(#@(Id)-plot)" />
                            }
                            else if (element.Value is Elements.Rectangle rect)
                            {
                                <rect x=@Legend.X
                                      y=@offset
                                      width=@l.Width
                                      height=@elements.Height
                                      fill=@rect.Fill
                                      fill-opacity=@rect.FillOpacity
                                      stroke=@rect.Stroke
                                      stroke-width=@rect.StrokeWidth
                                      clip-path="url(#@(Id)-plot)" />
                            }
                        }

                        <text>
                            <text
                                  class="legend-label"
                                  x=@(Legend.X + l.Width + Style.Legend.Labels.Margin.Left)
                                  y=@(offset + elements.Height / 2.0 + label.Height / 4.0)
                                  text-anchor=@(Style.Legend.Labels.Anchor.Render())
                                  font-size=@(Style.Legend.Labels.FontSize)
                                  clip-path="url(#@(Id)-legend)">
                                @label.Value
                            </text>
                        </text>

                        offset += Math.Max(elements.Height, label.Height) + Style.Legend.Labels.Margin.Bottom;
                    }
                }
                else if (l.Aes.Type == Guide.ColorBar)
                {
                    var xOffset = Legend.X + l.Width + Style.Legend.Labels.Margin.Left;
                    offset += Style.Legend.Labels.Margin.Top;

                    var n = l.Items.Count;

                    for (int j = 0; j < n; j++)
                    {
                        var (label, _) = l.Items[j];

                        <text>
                            <text
                                  class="legend-label"
                                  x=@xOffset
                                  y=@(offset + (j + 1.0) * 3.0 * l.Height + label.Height / 4.0)
                                  text-anchor=@(Style.Legend.Labels.Anchor.Render())
                                  font-size=@(Style.Legend.Labels.FontSize)
                                  clip-path="url(#@(Id)-legend)">
                                @label.Value
                            </text>
                        </text>
                    }

                    <rect x=@Legend.X
                          y=@offset
                          width=@l.Width
                          height=@(3.0 * n * l.Height)
                          fill="url(#gadient-@(Id)-@i)"
                          stroke=@Style.Legend.Labels.Color
                          stroke-width="0.2"
                          clip-path="url(#@(Id)-plot)" />
                }
            }
        }
        else
        {
            var offset = Legend.X;
            var middle = Legend.Y + Legend.Height / 2.0;

            for (int i = 0; i < Context.Legends.Count; i++)
            {
                var l = Context.Legends[i];

                if (l.Title?.Height > 0)
                {
                    offset += Style.Legend.Title.Margin.Left;

                    <text>
                        <text
                              class="legend-title"
                              x=@offset
                              y=@(middle + l.Title.Height / 4.0)
                              text-anchor=@(Style.Legend.Title.Anchor.Render())
                              font-size=@(Style.Legend.Title.FontSize)
                              clip-path="url(#@(Id)-plot)">
                            @l.Title.Value
                        </text>
                    </text>

                    offset += l.Title.Width + Style.Legend.Title.Margin.Right;
                }

                if (l.Aes.Type == Guide.Items)
                {
                    for (int j = 0; j < l.Items.Count; j++)
                    {
                        var (label, elements) = l.Items[j];

                        for (int k = 0; k < elements.Count; k++)
                        {
                            var element = elements[k];

                            if (element.Value is Elements.HLine hline)
                            {
                                <line x1=@offset
                                      x2=@(offset + elements.Width)
                                      y1=@(middle)
                                      y2=@(middle)
                                      stroke-width=@hline.StrokeWidth
                                      stroke=@hline.Stroke
                                      stroke-opacity=@hline.StrokeOpacity
                                      stroke-dasharray=@(hline.LineType.Render())
                                      clip-path="url(#@(Id)-plot)" />

                            }
                            else if (element.Value is Elements.VLine vline)
                            {
                                <line x1=@(offset + elements.Width / 2.0)
                                      x2=@(offset + elements.Width / 2.0)
                                      y1=@Legend.Y
                                      y2=@(Legend.Y + Legend.Height)
                                      stroke-width=@vline.StrokeWidth
                                      stroke=@vline.Stroke
                                      stroke-opacity=@vline.StrokeOpacity
                                      stroke-dasharray=@(vline.LineType.Render())
                                      clip-path="url(#@(Id)-plot)" />

                            }
                            else if (element.Value is Elements.Circle circle)
                            {
                                <circle cx=@(offset + elements.Width / 2.0)
                                        cy=@middle
                                        r=@circle.Radius
                                        stroke-width="0.71"
                                        stroke=@circle.Stroke
                                        stroke-opacity=@circle.StrokeOpacity
                                        fill=@circle.Fill
                                        fill-opacity=@circle.FillOpacity
                                        clip-path="url(#@(Id)-plot)" />
                            }
                            else if (element.Value is Elements.Rectangle rect)
                            {
                                <rect x=@offset
                                      y=@(middle - elements.Height / 2.0)
                                      width=@elements.Width
                                      height=@elements.Height
                                      fill=@rect.Fill
                                      fill-opacity=@rect.FillOpacity
                                      stroke=@rect.StrokeOpacity
                                      stroke-width=@rect.StrokeWidth
                                      clip-path="url(#@(Id)-plot)" />
                            }
                        }

                        offset += elements.Width;

                        offset += Style.Legend.Labels.Margin.Left;

                        <text>
                            <text
                                  class="legend-label"
                                  x=@offset
                                  y=@(middle + label.Height / 4.0)
                                  text-anchor=@(Style.Legend.Labels.Anchor.Render())
                                  font-size=@(Style.Legend.Labels.FontSize)
                                  clip-path="url(#@(Id)-legend)">
                                @label.Value
                            </text>
                        </text>

                        offset += label.Width + Style.Legend.Labels.Margin.Right;
                    }
                }
                else if (l.Aes.Type == Guide.ColorBar)
                {
                    offset += Style.Legend.Labels.Margin.Left;

                    var yOffset = Legend.Y + l.Items[0].label.Height;

                    for (int j = 0; j < l.Items.Count; j++)
                    {
                        var (label, _) = l.Items[j];

                        <text>
                            <text
                                  class="legend-label"
                                  x=@(offset + 3.0 * (j + 1.0) * l.Width - label.Width / 2.0)
                                  y=@yOffset
                                  text-anchor=@(Style.Legend.Labels.Anchor.Render())
                                  font-size=@(Style.Legend.Labels.FontSize)
                                  clip-path="url(#@(Id)-legend)">
                                @label.Value
                            </text>
                        </text>
                    }

                    yOffset += Style.Legend.Labels.Margin.Bottom;

                    <rect x=@offset
                          y=@yOffset
                          width=@(3.0 * l.Width * l.Items.Count)
                          height=@l.Height
                          fill="url(#gadient-@(Id)-@i)"
                          stroke=@Style.Legend.Labels.Color
                          stroke-width="0.2"
                          clip-path="url(#@(Id)-plot)" />
                }
            }
        }
    }

    private void RenderPanels(RenderTreeBuilder __builder)
    {
        var width = wrapper.Width - Context.Strip - (Context.N.cols - 1.0) * Style.Panel.Spacing.X;

        if (!Context.AxisVisibility.y)
        {
            width -= Context.Axis.width;
        }

        var height = wrapper.Height - Context.Strip - (Context.N.rows - 1.0) * Style.Panel.Spacing.Y;

        if (!Context.AxisVisibility.x)
        {
            height -= Context.Axis.height;
        }

        if (!Context.AxisTitlesVisibility.x && !string.IsNullOrEmpty(Context.XLab))
        {
            height -= Context.AxisTitles.x;
        }

        var xOffsetReset = wrapper.X;

        var xOffset = xOffsetReset;
        var yOffset = wrapper.Y;

        for (var i = 0; i < Context.Panels.Count; i++)
        {
            var panel = Context.Panels[i];

            var x = xOffset;
            var y = yOffset;

            var w = panel.Width * width;
            var h = panel.Height * height;

            if (panel.Coord.row == 0)
            {
                h += Context.Strip;
            }

            if (panel.Coord.col == 0 && !Context.AxisVisibility.y && Style.Axis.Y == Position.Left)
            {
                w += Context.Axis.width;
            }

            if (panel.Coord.row == (Context.N.rows - 1))
            {
                if (!Context.AxisVisibility.x)
                {
                    h += Context.Axis.height;
                }

                if (!Context.AxisTitlesVisibility.x && !string.IsNullOrEmpty(Context.XLab))
                {
                    h += Context.AxisTitles.x;
                }
            }

            if (panel.Coord.col == (Context.N.cols - 1))
            {
                w += Context.Strip;

                if (!Context.AxisVisibility.y && Style.Axis.Y == Position.Right)
                {
                    w += Context.Axis.width;
                }

                xOffset = xOffsetReset;
                yOffset += h + Style.Panel.Spacing.Y;
            }
            else
            {
                xOffset += w + Style.Panel.Spacing.X;
            }

            <Panel Data=@panel
                   X=@x
                   Y=@y
                   Width=@w
                   Height=@h
                   First=@(i == 0)
                   Last=@(i == (Context.Panels.Count - 1))
                   T=T TX=TX TY=TY />
        }
    }
}
