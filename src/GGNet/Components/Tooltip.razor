@inherits TooltipBase

@_renderForeignObject

@code {
    protected override void RenderForeignObject(RenderTreeBuilder __builder)
    {
        if (context is not null)
        {
            var px = (context.X - Zone.X) / Zone.Width;
            var py = 1.0 - ((context.Y - Zone.Y) / Zone.Height);

            var (role, tx, ty) = (px, py) switch
            {
                var (_px, _py) when _px < 0.25 && _py < 0.25 => ("tooltip-right-start", context.X + context.Offset, context.Y),
                var (_px, _py) when _px < 0.25 && _py > 0.75 => ("tooltip-right-end", context.X + context.Offset, context.Y),
                var (_px, _py) when _px > 0.75 && _py < 0.25 => ("tooltip-left-start", context.X - context.Offset, context.Y),
                var (_px, _py) when _px > 0.8 && _py > 0.75 => ("tooltip-left-end", context.X - context.Offset, context.Y),
                var (_px, _) when _px > 0.75 => ("tooltip-left-center", context.X - context.Offset, context.Y),
                var (_, _py) when _py > 0.75 => ("tooltip-bottom-center", context.X, context.Y + context.Offset),
                var (_, _py) when _py < 0.25 => ("tooltip-top-center", context.X, context.Y - context.Offset),
                _ => ("tooltip-right-center", context.X + context.Offset, context.Y)
            };
            <foreignObject role=@role x=@tx y=@ty width="1" height="1">
            <div class="container" style="--tootip-color: @(context.Color); --tooltip-opacity: @(context.Opacity);">
                <div class="arrow"></div>
                <div class="bubble">@(context.Content)</div>
            </div>
        </foreignObject>
        }
    }
}
