@page "/live"
@implements IAsyncDisposable

@using System.Threading
@using System.Threading.Tasks

@using NodaTime

@using GGNet
@using GGNet.Datasets
@using GGNet.Components

<div class="border rounded-lg p-1" style="width: 720px; background-color: #252A32;">
    <Plot Data=@spy T=SPY.Bar TX=LocalDate TY=Double RenderPolicy=RenderPolicy.Auto @ref=@plot />
</div>

@code {

    private Source<SPY.Bar> source;
    private Data<SPY.Bar, LocalDate, double> spy;
    private Plot<SPY.Bar, LocalDate, double> plot;

    private SPY.Bar[] bars = SPY.Load();

    protected override void OnInitialized()
    {
        source = new Source<SPY.Bar>();

        for (var i = 0; i < 10; i++)
        {
            source.Add(bars[i++]);
        }

        spy = Plot.New(source, x: o => o.date, y: o => o.close)
            .Title("SPY US Equity")
            .Geom_Area(alpha: 0.3)
            .Scale_X_Discrete_Date(expand: (0, 0, 0, 0))
            .YLab("Close")
            .Caption("Source: Bloomberg")
            .Theme(axisY: Position.Right);
    }

    private readonly CancellationTokenSource cancellation = new CancellationTokenSource();

    private Task task;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        task = Task.Factory.StartNew(async () =>
        {
            try
            {
                var token = cancellation.Token;

                var i = 10;

                var rnd = new Random();

                while (!token.IsCancellationRequested)
                {
                    var bar = bars[i];
                    var close = bar.close;

                    source.Add(bar);

                    for (var j = 0; j < 10; j++)
                    {
                        bar.close = bar.low + rnd.NextDouble() * (bar.high - bar.low);

                        await plot.RefreshAsync().ConfigureAwait(false);

                        await Task.Delay(rnd.Next(0, 2500)).ConfigureAwait(false);
                    }

                    bar.close = close;

                    if (++i == bars.Length)
                    {
                        break;
                    }
                }
            }
            catch (Exception e)
            {
            }
        }, TaskCreationOptions.LongRunning);
    }

    public async ValueTask DisposeAsync()
    {
        cancellation?.Cancel();
        cancellation?.Dispose();

        if (task is not null)
        {
            await task.ConfigureAwait(false);
        }
    }
}
