@page "/covid19"

@inject HttpClient Http
@inject NavigationManager Navigation

@using NodaTime

@using GGNet
@using GGNet.Components

@if (plot is not null)
{
    <div style="width: 720px;">
        <Plot Data=@plot T=TS TX=Double TY=Double Width=720 Height=576 />
    </div>

    <div style="width: 720px;">
        <Plot Data=@plot2 T="(TS, double)" TX=Double TY=Double Width=720 Height=576 />
    </div>

    <div style="width: 720px;">
        <Plot Data=@plot3 T="(TS, double)" TX=Double TY=Double Width=720 Height=576 />
    </div>

    <div style="width: 720px;">
        <Plot Data=@plot4 T="(TS, double)" TX=Double TY=Double Width=720 Height=576 />
    </div>

    <div style="width: 720px;">
        <Plot Data=@plot5 T="(string, LocalDate, double)" TX=LocalDate TY=Double Width=720 Height=576 />
    </div>
}

@code {
    Data<TS, double, double> plot;
    Data<(TS ts, double age), double, double> plot2;
    Data<(TS ts, double obesity), double, double> plot3;
    Data<(TS ts, double probability), double, double> plot4;
    Data<(string continent, LocalDate date, double deaths), LocalDate, double> plot5;

    protected override async Task OnInitializedAsync()
    {
        var data = await GetData();
        var ageData = await GetAgeData();
        var obesityData = await GetObesityData();
        var probabilityData = await GetProbabilityData();

        plot = Plot.New(data.Where(o => o.DeathsCumulative >= 5 && !string.IsNullOrEmpty(o.Country.Continent)), o => o.ConfirmedCumulative, o => o.DeathsCumulative)
            .Title("Case Fatality Rate")
            //.Geom_ABLine(new[] { 0.005, 0.01, 0.02, 0.05, 0.1 }, o => o, o => 0, o => $"{o:P2}".Replace(".00", ""), color: "rgba(0, 0, 0, 0.3)", lineType: LineType.Dotted)
            .Geom_Point(size: 3, alpha: 0.5, animation: true)
            .Scale_X_Log10()
            .XLab("Confirmed Cases - Log")
            .Scale_Y_Log10()
            .YLab("Confirmed Deaths - Log")
            .Scale_Color_Discrete(o => o.Country.Continent, Colors.Viridis)
            .Theme(dark: false);

        var age = data
            .Where(o => o.Population > 0 && o.DeathsCumulative > 5 && !string.IsNullOrEmpty(o.Country.Continent))
            .Join(ageData, o => o.Country.A3, o => o.a3, (o, p) => (ts: o, age: p.age60_))
            .ToList();

        var text = string.Join('\n', age
            .Select(o => $"(continent: \"{o.ts.Country.Continent}\", age: {o.age / 100}, deaths: {o.ts.DeathsCumulative / o.ts.Population * 1000000.0}),")
            .ToArray());

        var t = 1.9855;
        var n = 86;
        var mse = 0.4248488275613588;
        var xavg = 0.170082554;
        var sx = 0.0831531957;
        var N = 100;

        double CI(double x) => t * Math.Sqrt(n / (n - 2.0) * mse) * Math.Sqrt(1.0 / n + (x - xavg) * (x - xavg) / ((n - 1.0) * sx * sx));

        plot2 = Plot.New(age, o => o.age / 100, o => o.ts.DeathsCumulative / o.ts.Population * 1000000.0)
            .Title("Covid19 - Proportion of Population above 60")
            .SubTitle("R² =0.4")
            .Geom_Ribbon(Enumerable.Range(0, N).Select(o => o * 0.4 / N), o => o, o => Math.Pow(10.0, 6.37009 * o - 0.540860355 - CI(o)), o => Math.Pow(10.0, 6.37009 * o - 0.540860355 + CI(o)), tooltip: o => "Tooltip", fill: "rgba(0, 0, 0, 0.05)", scale: (false, true))
            .Geom_ABLine(new[] { (a: 6.37009, b: -0.540860355) }, o => o.a, o => o.b, o => $"y = {o.a:N2}x {o.b:N2}", transformation: (false, false), color: "rgba(0, 0, 0, 0.3)")
            .Geom_Point(size: 3, alpha: 0.5, animation: true)
            .Scale_X_Continuous(format: "P0")
            .Scale_Y_Log10()
            .YLab("Confirmed Deaths / Million - Log")
            .Scale_Color_Discrete(o => o.ts.Country.Continent, Colors.Viridis)
            .Theme(dark: false);

        var obesity = data
           .Where(o => o.Population > 0 && o.DeathsCumulative > 5 && !string.IsNullOrEmpty(o.Country.Continent))
           .Join(obesityData, o => o.Country.A3, o => o.a3, (o, p) => (ts: o, obesity: p.obesity))
           .ToList();

        plot3 = Plot.New(obesity, o => o.obesity, o => o.ts.DeathsCumulative / o.ts.Population * 1000000.0)
            .Geom_Point(size: 3, alpha: 0.5, animation: true)
            .Scale_Y_Log10()
            .YLab("Confirmed Deaths / Million - Log")
            .Scale_Color_Discrete(o => o.ts.Country.Continent, Colors.Viridis)
            .Theme(dark: false);

        var probability = data
           .Where(o => o.Population > 0 && o.DeathsCumulative > 5 && !string.IsNullOrEmpty(o.Country.Continent))
           .Join(probabilityData, o => o.Country.A3, o => o.a3, (o, p) => (ts: o, probability: p.probability))
           .ToList();

        plot4 = Plot.New(probability, o => o.probability, o => o.ts.DeathsCumulative / o.ts.Population * 1000000.0)
            .Geom_Point(size: 3, alpha: 0.5, animation: true)
            .Scale_Y_Log10()
            .YLab("Confirmed Deaths / Million - Log")
            .Scale_Color_Discrete(o => o.ts.Country.Continent, Colors.Viridis)
            .Theme(dark: false);

        var continents = data
            .Where(o => !string.IsNullOrEmpty(o.Country.Continent))
            .SelectMany(o => o.Points.Select(p => (continent: o.Country.Continent, date: p.Date, deaths: p.DeathsCumulative)))
            .GroupBy(o => o.continent)
            .SelectMany(g => g.GroupBy(o => o.date).Select(o => (continent: g.Key, date: o.Key, deaths: o.Sum(p => p.deaths))))
            .OrderBy(o => o.date)
            .ThenBy(o => o.continent)
            .ToList();

        plot5 = Plot.New(continents, o => o.date, o => o.deaths)
            .Geom_Area(position: PositionAdjustment.Stack)
            //.XLim(new LocalDate(2020, 2, 15))
            .Scale_Y_Continuous(format: "#,##0")
            .Scale_Fill_Discrete(o => o.continent, Colors.Viridis)
            .Theme(dark: false);
    }
}
